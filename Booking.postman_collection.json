{
	"info": {
		"_postman_id": "92383496-7585-4e3e-a552-11b1bdb04341",
		"name": "Booking",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27229394"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Create Token with valid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Verify response is json formate\",function(){\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.contains(\"application/json\")\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Token is recived\",function(){\r",
									"    pm.environment.set(\"Token\",pm.response.json().token);\r",
									"    pm.expect(pm.environment.get(\"Token\")).to.be.not.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code should be 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"{{Username}}\",\r\n    \"password\" : \"{{Password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/auth",
							"host": [
								"{{URL}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "\nThis endpoint is used to authenticate the user and obtain a token for accessing protected resources. The HTTP POST request is sent to `{{URL}}/auth`.\n\n### Request Parameters\nThis endpoint does not require any request parameters.\n\n### Response\nThe response from the last execution of this endpoint had a status code of 200. The response body included a JSON object with a `token` property. The value of the `token` property was an empty string.\n\nPlease note that the actual token value may vary in different executions.\n\n"
					},
					"response": []
				},
				{
					"name": "Create Token with invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Authentication with invalid data\",function(){\r",
									"    pm.expect(pm.response.json().reason).to.be.equal(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"{{InvalidUsername}}\",\r\n    \"password\":\"{{InvalidPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/auth",
							"host": [
								"{{URL}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "Create New Booking",
					"item": [
						{
							"name": "Create  with valid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify response contains ID\",function(){\r",
											"    pm.expect(pm.response.json().bookingid).to.exist\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response ID is number\",function(){\r",
											"     pm.expect( typeof pm.response.json().bookingid).to.be.equal(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"ID\",pm.response.json().bookingid);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jimo\",\r\n    \"lastname\" : \"Browno\",\r\n    \"totalprice\" : 1111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-02\",\r\n        \"checkout\" : \"2019-01-02\" },\r\n\"additionalneeds\" : \"Breakfasto\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/booking",
									"host": [
										"{{URL}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create with invalid data",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jimo\",\r\n    \"lastname\" : \"Browno\",\r\n    \"totalprice\" : 1111\r\n   \r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/booking",
									"host": [
										"{{URL}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrieve booking data",
					"item": [
						{
							"name": "Retrieve with valid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Data recived corectly\",function(){\r",
											"    pm.expect(pm.response.json().firstname).to.be.string\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"check response formate is json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.contain(\"application/json\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/booking/{{ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"booking",
										"{{ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve with invalid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify response of invalid ID\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/booking/{{Invalid_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"booking",
										"{{Invalid_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Modify Booking Data",
					"item": [
						{
							"name": "Modify with valid Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"  key: \"Cookie\",\r",
											"  value: \"932c42f92d21650\"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify modify response status is 200\",function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Data is updated\",function(){\r",
											"    pm.expect(pm.response.json().firstname).to.be.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data is json formate\",function(){\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.contain(\"application/json\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jamesooo\",\r\n    \"lastname\" : \"Brownoo\",\r\n    \"totalprice\" : 98,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-11\",\r\n        \"checkout\" : \"2019-02-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfastoo\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/booking/{{ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"booking",
										"{{ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify with invalid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify modify with invalid data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{Token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/booking/{{Invalid_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"booking",
										"{{Invalid_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Partial Modify Booking Data",
					"item": [
						{
							"name": "Partial Modify with valid Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"  key: \"Cookie\",\r",
											"  value: \"932c42f92d21650\"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify modify response status is 200\",function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Data is updated\",function(){\r",
											"    pm.expect(pm.response.json().firstname).to.be.equal(\"mohamed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data is json formate\",function(){\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.contain(\"application/json\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"mohamed\",\r\n    \"lastname\" : \"elbadri\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/booking/{{ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"booking",
										"{{ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Booking Data",
					"item": [
						{
							"name": "Delete booking data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"item DELETED\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"verfiy modify responce time\",function(){\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify modify response size\",function(){\r",
											"    pm.expect(parseInt(pm.response.headers.get(\"Content-Length\"))).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{Token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/booking/{{ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"booking",
										"{{ID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Performance Testing",
			"item": [
				{
					"name": "Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Authentication response time is accepted\",function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"{{Username}}\",\r\n    \"password\":\"{{Password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/auth",
							"host": [
								"{{URL}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify New Booking responce time\",function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.within(200,500)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\" },\r\n\"additionalneeds\" : \"Breakfast\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/booking",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Booking Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Retrieve Data in accepted responce time\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/booking/2",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify Booking Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verfiy modify responce time\",function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jamesooo\",\r\n    \"lastname\" : \"Brownoo\",\r\n    \"totalprice\" : 98,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-11\",\r\n        \"checkout\" : \"2019-02-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfastoo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/booking/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking",
								"{{ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Partial Modify Booking Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verfiy modify responce time\",function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jamesooo\",\r\n    \"lastname\" : \"Brownoo\",\r\n    \"totalprice\" : 98,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-11\",\r\n        \"checkout\" : \"2019-02-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfastoo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/booking/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking",
								"{{ID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "This collection is responsible for testing the response time of each API module"
		},
		{
			"name": "Security Testing",
			"item": [
				{
					"name": "Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Verify Authentication response size\", function () {\r",
									"    pm.expect(parseInt(pm.response.headers.get(\"Content-Length\"))).to.be.equal(27)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"{{Username}}\",\r\n    \"password\":\"{{Password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/auth",
							"host": [
								"{{URL}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify New Booking response size\", function () {\r",
									"    pm.expect(parseInt(pm.response.headers.get(\"Content-Length\"))).to.be.below(1000)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\" },\r\n\"additionalneeds\" : \"Breakfast\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/booking",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Booking Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Retrieve Data Response size is within the accepted\",function(){\r",
									"    pm.expect(parseInt(pm.response.headers.get(\"Content-Length\"))).to.be.below(180)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/booking/2",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify Booking Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify modify response size\",function(){\r",
									"    pm.expect(parseInt(pm.response.headers.get(\"Content-Length\"))).to.be.below(1000);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jamesooo\",\r\n    \"lastname\" : \"Brownoo\",\r\n    \"totalprice\" : 98,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-11\",\r\n        \"checkout\" : \"2019-02-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfastoo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/booking/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking",
								"{{ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Partial Modify Booking Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify modify response size\",function(){\r",
									"    pm.expect(parseInt(pm.response.headers.get(\"Content-Length\"))).to.be.below(1000);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jamesooo\",\r\n    \"lastname\" : \"Brownoo\",\r\n    \"totalprice\" : 98,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-11\",\r\n        \"checkout\" : \"2019-02-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfastoo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/booking/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking",
								"{{ID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "This collection is responsible for check response size of the requests to check if there is any injection attacks"
		}
	]
}